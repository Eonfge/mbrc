import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'idea'


def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}

def gitHash() {
  return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

android {
  compileSdkVersion 25
  buildToolsVersion '25.0.0'

  defaultConfig {
    applicationId 'com.kelsos.mbrc'
    minSdkVersion 16
    targetSdkVersion 25
    versionCode 105
    versionName "2.0.0-alpha.1"

    // Enabling multidex support.
    multiDexEnabled true

  }

  signingConfigs {
    release {
      storeFile file('placeholder')
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
      buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    }

    debug {
      applicationIdSuffix ".dev"
      versionNameSuffix "-dev"
      buildConfigField "String", "GIT_SHA", "\"debug_build\""
      buildConfigField "String", "BUILD_TIME", "\"debug_build\""
    }

    preview {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      applicationIdSuffix ".preview"
      versionNameSuffix "-preview"

      buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
      buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    }
  }


  productFlavors {

    development {
      minSdkVersion 21
    }

    production {
      // Default minSdkVersion
    }
  }

  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
    lintConfig file("lint.xml")
    xmlReport false
    htmlReport true
    htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def originalFilename = output.outputFile
      def versionInfo = "-v${variant.mergedFlavor.versionCode}-${variant.mergedFlavor.versionName}"
      def filename = originalFilename.name
          .replace(".apk", versionInfo + ".apk")
          .replace(project.name, defaultConfig.applicationId);
      filename = "${originalFilename.parent}/${filename}"
      output.outputFile = file(filename)
    }
  }
  dexOptions {
    jumboMode true
    incremental false
    preDexLibraries false
    javaMaxHeapSize "2g"
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    debug.java.srcDirs += 'src/debug/kotlin'
    androidTest.java.srcDirs += 'src/androidTest/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

ext {
  supportLibraryVersion = '25.0.0'
  jacksonVersion = '2.8.4'
  okhttpVersion = '3.4.1'
  retrofitVersion = '2.1.0'
  dbflow_version = "4.0.0-beta1"
  toothpick_version = "1.0.0"
  butterknife_version = "8.4.0"
  stetho_version = "1.4.1"
}

dependencies {
  compile "com.android.support:support-v4:${supportLibraryVersion}"
  compile "com.android.support:appcompat-v7:${supportLibraryVersion}"
  compile "com.android.support:cardview-v7:${supportLibraryVersion}"
  compile "com.android.support:preference-v7:${supportLibraryVersion}"
  compile "com.android.support:preference-v14:${supportLibraryVersion}"
  compile "com.android.support:recyclerview-v7:${supportLibraryVersion}"
  compile "com.android.support:palette-v7:${supportLibraryVersion}"
  compile "com.android.support:support-annotations:${supportLibraryVersion}"
  compile "com.android.support:design:${supportLibraryVersion}"

  compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
  compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

  compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
  compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"
  compile "com.squareup.retrofit2:converter-jackson:${retrofitVersion}"

  compile "com.squareup.picasso:picasso:2.5.2"

  compile "com.squareup.okhttp3:okhttp-urlconnection:${okhttpVersion}"
  compile "com.squareup.okhttp3:okhttp:${okhttpVersion}"
  compile "com.squareup.okhttp3:okhttp-ws:${okhttpVersion}"
  compile "com.squareup.okhttp3:logging-interceptor:${okhttpVersion}"

  compile 'io.reactivex:rxandroid:1.2.1'
  compile 'io.reactivex:rxjava:1.2.1'
  compile 'io.reactivex:rxkotlin:0.60.0'

  compile "com.jakewharton:butterknife:${butterknife_version}"
  kapt "com.jakewharton:butterknife-compiler:${butterknife_version}"

  compile 'com.jakewharton.timber:timber:4.3.1'
  compile 'com.android.support:multidex:1.0.1'

  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  kapt "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"

  // kapt for kotlin apt
  compile "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
  compile "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"
  compile "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:${dbflow_version}"

  compile('com.afollestad.material-dialogs:core:0.9.0.2@aar') {
    transitive = true
  }

  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:2.2.6'
  testCompile 'org.powermock:powermock-module-junit4:1.6.5'
  testCompile 'org.powermock:powermock-api-mockito:1.6.5'
  testCompile 'org.robolectric:robolectric:3.1.2'
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

  compile 'nl.littlerobots.rxlint:rxlint:1.0'

  debugCompile "com.facebook.stetho:stetho:${stetho_version}"
  debugCompile "com.facebook.stetho:stetho-okhttp3:${stetho_version}"

  compile "com.github.stephanenicolas.toothpick:toothpick-runtime:${toothpick_version}"
  compile "com.github.stephanenicolas.toothpick:smoothie:${toothpick_version}"
  kapt "com.github.stephanenicolas.toothpick:toothpick-compiler:${toothpick_version}"

  //highly recommended
  testCompile "com.github.stephanenicolas.toothpick:toothpick-testing:${toothpick_version}"
}

allprojects {
  afterEvaluate { project ->

    def signProperties = rootProject.file('signing.properties')
    if (signProperties.exists()) {
      def prop = new Properties()
      prop.load(new FileInputStream(signProperties))
      def filepath = prop.getAt("keys")
      def keyProperties = file(filepath)
      if (keyProperties.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(keyProperties))
        def keystorePath = props.getAt('keystore')
        def releaseConfig = android.signingConfigs.getAt('release')
        releaseConfig.storeFile = file(keystorePath)
        releaseConfig.storePassword = props.getAt('storePass')
        releaseConfig.keyAlias = props.getAt('keyAlias')
        releaseConfig.keyPassword = props.getAt('keyPass')
      }
    }
  }
}


kapt {
  generateStubs = true
  arguments {
    arg('toothpick_registry_package_name', 'com.kelsos.mbrc')
    arg('toothpick_registry_children_package_names', 'toothpick.smoothie')
  }
}
