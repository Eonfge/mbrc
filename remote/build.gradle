import java.text.SimpleDateFormat

apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'idea'
apply plugin: 'com.neenbedankt.android-apt'

def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}

def gitHash() {
  return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

def hasModifiedDeletedOrOtherFiles() {
  return !"git -C ${rootDir} ls-files -mdo --exclude-standard".execute().text.trim().isEmpty()
}

def hasStagedFiles() {
  return !"git -C ${rootDir} diff-index --no-ext-diff --name-only --cached HEAD".execute().text.
      trim().
      isEmpty()
}

def dirtyWorkingCopy() {
  return hasModifiedDeletedOrOtherFiles() || hasStagedFiles()
}

def gitDescription() {
  return dirtyWorkingCopy() ? "${gitHash()}-dirty" : gitHash()
}

android {
  compileSdkVersion 22
  buildToolsVersion "22.0.1"

  defaultConfig {
    applicationId 'com.kelsos.mbrc'
    minSdkVersion 15
    targetSdkVersion 22
    versionCode 103
    versionName "1.0.0-alpha.1"

    buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    buildConfigField "String", "DEVHOST", "\"192.168.1.5\""
    buildConfigField "int", "DEVSOCKPORT", "8187"

  }

  signingConfigs {
    release {
      storeFile file('placeholder')
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    debug {
      applicationIdSuffix ".dev"
      versionNameSuffix "-dev"
    }

    preview {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      applicationIdSuffix ".preview"
      versionNameSuffix "-preview"
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
    lintConfig file("lint.xml")
    xmlReport false
    htmlReport true
    htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def originalFilename = output.outputFile
      def versionInfo = "-v${variant.mergedFlavor.versionCode}-${variant.mergedFlavor.versionName}-${gitDescription()}"
      def filename = originalFilename.name
          .replace(".apk", versionInfo + ".apk")
          .replace(project.name, defaultConfig.applicationId);
      filename = "${originalFilename.parent}/${filename}"
      output.outputFile = file(filename)
    }
  }

  sourceSets {
    main {
      java {
        srcDir 'src/main'
        srcDir 'src-gen'
      }
    }
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.5'
}

dependencies {

  compile 'com.android.support:support-v4:22.2.1'
  compile 'com.android.support:appcompat-v7:22.2.1'
  compile 'com.android.support:cardview-v7:22.2.1'
  compile 'com.android.support:recyclerview-v7:22.2.1'
  compile 'com.android.support:palette-v7:22.2.1'
  compile 'com.android.support:support-annotations:22.2.1'
  compile 'com.android.support:design:22.2.1'
  compile 'com.mobeta.android.dslv:drag-sort-listview:0.6.2@aar'
  compile 'org.roboguice:roboguice:3.0.1'
  compile 'com.fasterxml.jackson.core:jackson-core:2.5.3'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.5.3'
  compile 'com.squareup.retrofit:retrofit:1.9.0'
  compile 'com.squareup.picasso:picasso:2.5.2'
  compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
  compile 'com.squareup.okhttp:okhttp:2.4.0'
  compile 'com.squareup.okhttp:okhttp-ws:2.4.0'
  compile 'com.squareup:otto:1.3.8'
  compile 'com.github.machinarius:preferencefragment:0.1.2'
  compile 'com.github.mrengineer13:snackbar:1.2.0'
  compile 'io.reactivex:rxandroid:1.0.0'
  compile 'com.afollestad:material-dialogs:0.7.8.1'
  compile 'com.jakewharton:butterknife:7.0.1'
  compile 'com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:0.7.2'

  apt 'com.raizlabs.android:DBFlow-Compiler:2.2.1'
  compile "com.raizlabs.android:DBFlow-Core:2.2.1"
  compile "com.raizlabs.android:DBFlow:2.2.1"

  provided 'org.roboguice:roboblender:3.0.1'

  androidTestCompile 'junit:junit:4.12'
  androidTestCompile 'org.robolectric:robolectric:2.4'
}

allprojects {
  afterEvaluate { project ->

    def signProperties = rootProject.file('signing.properties')
    if (signProperties.exists()) {
      def prop = new Properties()
      prop.load(new FileInputStream(signProperties))
      def filepath = prop.getAt("keys")
      def keyProperties = file(filepath)
      if (keyProperties.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(keyProperties))
        def keystorePath = props.getAt('keystore')
        def releaseConfig = android.signingConfigs.getAt('release')
        releaseConfig.storeFile = file(keystorePath)
        releaseConfig.storePassword = props.getAt('storePass')
        releaseConfig.keyAlias = props.getAt('keyAlias')
        releaseConfig.keyPassword = props.getAt('keyPass')
      }
    }
  }
}

project.tasks.withType(JavaCompile) {
  task -> options.compilerArgs << "-AguiceAnnotationDatabasePackageName=com.kelsos.mbrc"
}

task findbugs(type: FindBugs) {
  ignoreFailures = false
  effort = "max"
  reportLevel = "high"
  excludeFilter = new File("${project.rootDir}/config/quality/findbugs/findbugs-filter.xml")
  classes = fileTree("${project.rootDir}/remote/build/intermediates/classes/debug/")

  source fileTree('src/main/java')
  include '**/*.java'
  exclude '**/gen/**'

  reports {
    xml.enabled = false
    html.enabled = true
    html {
      destination "$project.buildDir/reports/findbugs/findbugs.html"
    }
  }

  classpath = files(project.configurations.compile.asPath)
}

checkstyle {
  toolVersion = "6.5"
}

task checkstyle(type: Checkstyle) {

  configFile file("${project.rootDir}/config/quality/checkstyle/checkstyle.xml")
  showViolations true
  configProperties = [
      'checkstyle.cache.file': rootProject.file('build/checkstyle.cache'),
      'checkstyle.config.dir': rootProject.file('config/quality/checkstyle/')
  ]
  configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/quality/checkstyle/suppressions.xml").absolutePath // Where is my suppressions file for checkstyle is...
  source 'src'
  include '**/*.java'
  exclude '**/gen/**'
  classpath = files(project.configurations.compile.asPath)
}

task pmd(type: Pmd) {
  ignoreFailures = false
  ruleSetFiles = files("${project.rootDir}/config/quality/pmd/pmd-ruleset.xml")
  ruleSets = []
  source 'src/main/java'
  include '**/*.java'
  exclude '**/gen/**'
  reports {
    xml.enabled = false
    html.enabled = true
    html {
      destination "$project.buildDir/reports/pmd/pmd.html"
    }
  }
}

check.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint'

gradle.taskGraph.afterTask { Task task, TaskState state ->
  if (state.failure) {
    if (task.name in ['checkstyle']) {
      ant.xslt(in: "$buildDir/reports/checkstyle/checkstyle.xml",
          style: new File(rootDir, 'config/quality/checkstyle/checkstyle-noframes-sorted.xsl'),
          out: new File("$buildDir/reports/checkstyle/checkstyle.html"))
    }
  }
}
