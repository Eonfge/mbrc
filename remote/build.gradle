import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
    }
}

apply plugin: 'android'

repositories {
    /** Temporary for vpi **/
    maven { url "http://dl.bintray.com/populov/maven" }
    mavenCentral()
    mavenLocal()
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def gitSha() {
    return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

dependencies {
    compile 'com.android.support:support-v4:19.0.0'
    compile 'com.android.support:appcompat-v7:19.0.0'
    compile 'com.google.inject:guice:3.0:no_aop'
    compile 'org.roboguice:roboguice:2.0'
    compile 'com.squareup:otto:1.3.4'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'com.viewpagerindicator:library:2.4.1@aar'
    compile 'com.mobeta.android.dslv:drag-sort-listview:0.6.1@aar'
    compile 'com.squareup.picasso:picasso:2.1.1'
    compile 'de.keyboardsurfer.android.widget:crouton:1.8.2@aar'
}

android {
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        buildConfigField "String", "GIT_SHA", "\"${gitSha()}\";"
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\";"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        instrumentTest.setRoot('tests')
    }

    signingConfigs {
        release {}
        debug {}
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            zipAlign true
        }
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix ".debug-${buildTime()}"
        }
    }

    productFlavors {
        defaultFlavor {}
    }

    lintOptions {
        abortOnError false
        xmlReport false
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}


apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

checkstyle {

}

task checkstyle(type: Checkstyle) {
    configFile = file("$rootDir/config/quality/checkstyle/checkstyle.xml")
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files(project.configurations.compile.asPath)

}

task findbugs(type: FindBugs) {
    excludeFilter file("$rootDir/config/quality/findbugs/findbugs-filter.xml")
    classes = fileTree('build/classes/debug/')
    source = fileTree('src/main/java/')
    classpath = files( project.configurations.compile.asPath )
    effort = 'max'
}

task pmd(type: Pmd) {
    ruleSetFiles = files("$rootDir/config/quality/pmd/pmd-ruleset.xml")
    ruleSets = ["basic", "braces", "strings"]
    source = fileTree(android.sourceSets.main.java.srcDirs)
}

gradle.taskGraph.afterTask {Task task, TaskState state ->
    if(state.failure) {
        if (task.name in ['checkstyle']) {
            ant.xslt(in: "$buildDir/reports/checkstyle/checkstyle.xml",
                    style: new File(rootDir, 'config/quality/checkstyle/checkstyle-noframes-sorted.xsl'),
                    out: new File("$buildDir/reports/checkstyle/checkstyle.html"))
        }
    }
}

allprojects {
    afterEvaluate { project ->
        def propsFile = rootProject.file('signing.properties')
        def configName = 'release'

        if (propsFile.exists()) {
            def prop = new Properties()
            prop.load(new FileInputStream(propsFile))
            def filepath = prop['keys']
            def keyPropFile = file(filepath)
            if (keyPropFile.exists() && android.signingConfigs.hasProperty(configName)) {
                def props = new Properties()
                props.load(new FileInputStream(keyPropFile))
                def keystorePath = props['keystore']
                android.signingConfigs[configName].storeFile = file(keystorePath)
                android.signingConfigs[configName].storePassword = props['storePass']
                android.signingConfigs[configName].keyAlias = props['keyAlias']
                android.signingConfigs[configName].keyPassword = props['keyPass']
            }
        }
    }
}