import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'retrolambda'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'sonar-runner'
apply plugin: 'idea'

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'UTC'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def gitSha() {
    return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

android {
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    compileSdkVersion 21
    buildToolsVersion "21.1.0"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 21
        buildConfigField "String", "GIT_SHA", "\"${gitSha()}\";"
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\";"
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        versionCode 91
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file('placeholder')
            keyAlias "placeholder"
            storePassword "placeholder"
            keyPassword "placeholder"
        }
        debug {}
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-d"
        }
    }

    lintOptions {
        abortOnError false
        xmlReport false
    }
}

dependencies {
    compile 'com.squareup.retrofit:retrofit:1.6.1'
    compile 'com.android.support:support-v13:21.0.0'
    compile 'com.android.support:appcompat-v7:21.0.0'
    compile 'com.android.support:cardview-v7:21.0.0'
    compile 'org.roboguice:roboguice:3.0'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'com.viewpagerindicator:library:2.4.1@aar'
    compile 'com.mobeta.android.dslv:drag-sort-listview:0.6.1@aar'
    compile 'com.squareup.picasso:picasso:2.4.0'
    compile 'com.github.mrengineer13:snackbar:0.4.0'
    compile 'com.squareup.retrofit:retrofit:1.6.1'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.netflix.rxjava:rxjava-android:0.20.6'
    provided 'org.roboguice:roboblender:3.0'
    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:2.3'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

project.tasks.withType(JavaCompile) { task ->
    options.compilerArgs << "-AguiceAnnotationDatabasePackageName=mbrc"
}

checkstyle {
    configFile = file("$rootDir/config/quality/checkstyle/checkstyle.xml")
}

task findbugs(type: FindBugs) {
    ignoreFailures = true
    excludeFilter file("$rootDir/config/quality/findbugs/findbugs-filter.xml")
    classes = fileTree('build/classes/free/debug/')
    source = fileTree('src/main/java/')
    classpath = files(project.configurations.compile.asPath)
    effort = 'max'
}

task checkstyle(type: Checkstyle) {
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files(project.configurations.compile.asPath)
}

task pmd(type: Pmd) {
    ruleSetFiles = files("$rootDir/config/quality/pmd/pmd-ruleset.xml")
    ruleSets = ["basic", "braces", "strings"]
    source = fileTree(android.sourceSets.main.java.srcDirs)
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        if (task.name in ['checkstyle']) {
            ant.xslt(in: "$buildDir/reports/checkstyle/checkstyle.xml",
                    style: new File(rootDir, 'config/quality/checkstyle/checkstyle-noframes-sorted.xsl'),
                    out: new File("$buildDir/reports/checkstyle/checkstyle.html"))
        }
    }
}

allprojects {

    afterEvaluate { project ->
        def propsFile = rootProject.file('signing.properties')
        def configName = 'release'

        if (propsFile.exists()) {
            def prop = new Properties()
            prop.load(new FileInputStream(propsFile))
            def filepath = prop['keys']
            def keyPropFile = file(filepath)
            if (keyPropFile.exists() && android.signingConfigs.hasProperty(configName)) {
                def props = new Properties()
                props.load(new FileInputStream(keyPropFile))
                def keystorePath = props['keystore']
                android.signingConfigs[configName].storeFile = file(keystorePath)
                android.signingConfigs[configName].storePassword = props['storePass']
                android.signingConfigs[configName].keyAlias = props['keyAlias']
                android.signingConfigs[configName].keyPassword = props['keyPass']
            }
        }
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.jdbc.url", "jdbc:h2:tcp://localhost:9092/sonar"
        property "sonar.jdbc.driverClassName", "org.h2.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"
        property "sonar.branch", "gradle"
        property "sonar.dynamicAnalysis", "reuseReports"
        properties["sonar.sources"] = android.sourceSets.main.java.srcDirs
        properties["sonar.tests"] = android.sourceSets.instrumentTest.java.srcDirs
        properties["sonar.binaries"] = file("build/classes/free/debug")
        property "sonar.surefire.reportsPath", "build/instrumentTest-results/connected/"
    }
}